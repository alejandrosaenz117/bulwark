import { Component, OnInit, ViewChild } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { Vulnerability } from '../vuln-form/Vulnerability';
import { AppService } from '../app.service';
import { AlertService } from '../alert/alert.service';
import { Table } from 'primeng/table';

@Component({
  selector: 'app-vulnerability',
  templateUrl: './vulnerability.component.html',
  styleUrls: ['./vulnerability.component.sass'],
})
export class VulnerabilityComponent implements OnInit {
  vulnAry: any = [];
  assetId: number;
  assessmentId: number;
  orgId: number;
  readOnly: boolean;
  risks = [
    { name: 'Informational' },
    { name: 'Low' },
    { name: 'Medium' },
    { name: 'High' },
    { name: 'Critical' },
  ];
  statuses = [{ name: 'Open' }, { name: 'Resolved' }, { name: 'On Hold' }];
  @ViewChild('vulnTable') table: Table;

  constructor(
    public activatedRoute: ActivatedRoute,
    public router: Router,
    public appService: AppService,
    public alertService: AlertService
  ) {}

  ngOnInit() {
    this.activatedRoute.data.subscribe(({ vulnerabilities }) => {
      this.vulnAry = vulnerabilities.vulnerabilities;
      this.readOnly = vulnerabilities.readOnly;
    });
    this.activatedRoute.params.subscribe((params) => {
      this.assetId = params.assetId;
      this.assessmentId = params.assessmentId;
      this.orgId = params.orgId;
    });
  }

  /**
   * Function to navigate the user to the Vulnerability Form
   * Takes no arguments, passes the org id, asset id, assessment id, and loads the form
   */
  navigateToVulnerabilityForm() {
    this.router.navigate([
      `organization/${this.orgId}/asset/${this.assetId}/assessment/${this.assessmentId}/vuln-form`,
    ]);
  }

  /**
   * Function responsible for navigating to a vulnerability
   * @param vulnId is the ID of the vulnerability requested
   */
  navigateToVulnerabilityFormById(vulnId: number) {
    this.router.navigate([
      `organization/${this.orgId}/asset/${this.assetId}/assessment/${this.assessmentId}/vuln-form/${vulnId}`,
    ]);
  }

  /**
   * Function responsible for navigating to an assessment, takes no params directly
   */
  navigateToAssessments() {
    this.router.navigate([`organization/${this.orgId}/asset/${this.assetId}`]);
  }

  /**
   * Function responsible for navigating to report area, takes no params directly
   */
  navigateToReport() {
    this.router.navigate([
      `organization/${this.orgId}/asset/${this.assetId}/assessment/${this.assessmentId}/report`,
    ]);
  }

  getVulnerabilities() {
    this.appService.getVulnerabilities(this.assessmentId).subscribe((vulns) => {
      this.vulnAry = [];
      this.vulnAry = vulns;
    });
  }

  /**
   * Function responsible for deleting a vulnerability
   * @param vuln associated data for the vulnerability, cleans up associations
   * of the vulnerability and the assessment it is assigned to by ID
   */
  deleteVuln(vuln: Vulnerability) {
    const r = confirm(`Delete the vulnerability "${vuln.name}"`);
    if (r === true) {
      this.appService.deleteVuln(vuln.id).subscribe((success: string) => {
        this.getVulnerabilities();
        this.alertService.success(success);
      });
    }
  }

  onRiskChange(event) {
    const selectedRiskAry = event.value.map((x) => x.name);
    this.table.filter(selectedRiskAry, 'risk', 'in');
  }

  onStatusChange(event) {
    const selectedStatusAry = event.value.map((x) => x.name);
    this.table.filter(selectedStatusAry, 'status', 'in');
  }
}
