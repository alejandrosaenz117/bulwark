import { UserRequest } from '../interfaces/user-request.interface';
import { Response } from 'express';
import { insertReportAuditRecord } from '../routes/report-audit.controller';
import puppeteer = require('puppeteer');
import * as path from 'path';
const fs = require('fs');
/**
 * @description API backend for report generation with Puppeteer
 * @param {UserRequest} req orgId, assetId, assessmentId
 * @param {Response} res contains all data associated and generates a
 * new html page with PDF Report
 * @returns a new page generated by Puppeteer with a Report in PDF format
 */
export const generateReport = async (req: UserRequest, res: Response) => {
  if (!req.body.orgId || !req.body.assetId || !req.body.assessmentId) {
    return res.status(400).send('Invalid report parameters');
  }
  const url =
    process.env.NODE_ENV === 'production'
      ? `${process.env.PROD_URL}/#/organization/${req.body.orgId}
          /asset/${req.body.assetId}/assessment/${req.body.assessmentId}/report/puppeteer`
      : `${process.env.DEV_URL}/#/organization/${req.body.orgId}
          /asset/${req.body.assetId}/assessment/${req.body.assessmentId}/report/puppeteer`;
  const browser = await puppeteer.launch({
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });
  const page = await browser.newPage();
  const filePath = path.join(__dirname, '../temp/temp_report.pdf');
  const jwtToken = req.headers.authorization;
  await page.evaluateOnNewDocument((token) => {
    localStorage.clear();
    localStorage.setItem('AUTH_TOKEN', token);
  }, jwtToken);
  await page.goto(url, { waitUntil: 'networkidle0' });
  await page.pdf({ path: filePath, format: 'A4' });
  await browser.close();
  const file = fs.createReadStream(filePath);
  const stat = fs.statSync(filePath);
  res.setHeader('Content-Length', stat.size);
  res.setHeader('Content-Type', 'application/pdf');
  res.setHeader('Content-Disposition', 'attachment; filename=report.pdf');
  file.pipe(res);
  await insertReportAuditRecord(+req.user, req.body.assessmentId);
  fs.unlink(filePath, (err, response) => {
    if (err) {
      // handle error here
    } else {
      // tslint:disable-next-line: no-console
      console.info('File removed');
    }
  });
};
